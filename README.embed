The 'make' process for RTcmix now includes the capability to compile
libraries for other applications and environments that can employ
an embedded version of RTcmix as an audio/music engine.  This
embedded version includes the Minc parser as well as all (well,
nearly all) the RTcmix instruments and functions in this distribution.

The compilation for different libraries is set by choosing the
correct "BUILDTYPE" in the site.conf file.  The default is with the
"BUILDTYPE" set to "STANDALONE", which will generate the 'classic'
command-line RTcmix running from a unix-like terminal (shell) window.

To set up for other compiles, you will need to edit the site.conf file
and change the "BUILDTYPE".  In site.conf, the relevant lines are:

	# for building embedded RTcmix libs.  Uncomment the one to build
	# see the README.embed file for more information
    BUILDTYPE = STANDALONE
    #BUILDTYPE = OSXEMBEDDED
    #BUILDTYPE = LINUXEMBEDDED
    #BUILDTYPE = MAXMSP
    #BUILDTYPE = PD
    #BUILDTYPE = IOS
	# if selecting "IOS", then one of the following two has to be uncommented
	#IPHONE_TYPE = SIMULATOR
	#IPHONE_TYPE = DEVICE

For example, to set RTcmix to compile a library for the Max/MSP [rtcmix~]
object, comment-out the "BUILDTYPE = STANDALONE" line and uncomment the
"BUILDTYPE = MAXMSP" line:

	# for building embedded RTcmix libs.  Uncomment the BUILDTYPE to build
	# see the README.embed file for more information
    #BUILDTYPE = STANDALONE
    #BUILDTYPE = OSXEMBEDDED
    #BUILDTYPE = LINUXEMBEDDED
    BUILDTYPE = MAXMSP
    #BUILDTYPE = PD
    #BUILDTYPE = IOS
	# if selecting "IOS", then one of the following two has to be uncommented
	#IPHONE_TYPE = SIMULATOR
	#IPHONE_TYPE = DEVICE

For an iOS compile, you will also have to uncomment whether you are building
a library for the Xcode iOS simulator or the iOS device.  These two
separate libraries can be combined (see below).

Some specific information about each buildtype:

BUILDTYPE = OSXEMBEDDED

-- This will create a dylib file, librtcmix_embedded.dylib, which can be used to
create a MacOS program or application which uses RTcmix's public API (see RTcmix_API.h)
to create, control, and stream audio to and from an RTcmix object.  The installation
command via 'make install' puts a copy of this library into $(TOP)/lib, which you
can then link against.

BUILDTYPE = LINUXEMBEDDED

-- This works identically to OSXEMBEDDED but on a Linux platform.

BUILDTYPE = MAXMSP

-- This will create a dylib file, "rtcmixdylib.so" in the src/rtcmix/ directory and
will create the rtcmix~.mxo object bundle in src/maxmsp.  The configuration macros
for installing both of these must to be set in your site.conf file.  Once
that is done, you can just do a "make install" at the top level and the two items
will be placed in their correct locations for use with MaxMSP.

BUILDTYPE = PD

-- This works very similarly to MAXMSP, but builds libs and objects which can
be installed in used in the PD system.


BUILDTYPE = IOS
IPHONE_TYPE = SIMULATOR
	-or-
IPHONE_TYPE = DEVICE

-- This will build a static library for use with the iOS operating system.
You will need to specify whether you are building the library for the
Xcode iOS simulator or for use on in iOS device (iPhone, iPad).  The
"IPHONE_TYPE = SIMULATOR" build will create the file librtcmix_iphone-SIM.a
in the src/rtcmix/ directory.  The "IPHONE_TYPE = DEVICE" will
produce librtcmix_iphone-DEV.a in the same directory.  Both of these
static libraries may be combined into one library for use in Xcode iOS
development with the following command:

lipo -create librtcmix_iphone-SIM.a librtcmix_iphone-DEV.a -output libiRTCMIX.a

The resulting libiRTCMIX.a "fat" static library file will contain code with
the proper architectures for all iOS uses.


These libraries are also generally distributed pre-built with the
applications they are intended to accompany ([rtcmix~], iRTcmix).  The install of the
libraries can be automated, assuming that if you are building these for development
you know what you are doing.

Coming soon:
The appropriate lib for Android OS development (the last two thanks
to Joel Matthys!).  This currently works separately but needs to be joined
to this build process.

Brad Garton
June, 2013

Updated by Doug Scott
September 2024


#!/bin/sh
# Normalize a floating-point sound file, multiplying every sample value
# by 1/32768, and writing to a new output file.
# JGG, 3/11/06

if [ $# -lt 1 ]
then
	echo	"Usage: `basename $0` file [inpoint [outpoint]]"
	exit 1
fi

flags='-v 1'

infile=$1
shift

extension=`expr "$infile" : '.*\.\(.*\)'`
base=`expr "$infile" : '\(.*\)\..*'`
outfile=${base}_rescale.${extension}
#echo ${outfile}

script='
inskip = 0.0;
indur = filedur($sfin);
inend = indur;
if (n_arg() > 0) {
	inskip = f_arg(0);
	if (inskip >= indur) {
		printf("inpoint (%f) must be less than file duration (%f).\n", inskip, indur);
		exit(-1);
	}
	if (n_arg() > 1) {
		inend = f_arg(1);
		if (inend > indur) {
			printf("outpoint (%f) must be within file duration (%f).\n", inend, indur);
			exit(-1);
		}
	}
	if (inskip >= inend) {
		printf("inpoint (%f) must be less than outpoint (%f).\n", inskip, inend);
		exit(-1);
	}
}
dur = inend - inskip;
amp = 1.0 / 32768.0;
set_option("play = off", "clobber = on");
sr = filesr($sfin);
chans = filechans($sfin);
rtsetparams(sr, chans);
rtinput($sfin);
rtoutput($sfout, "float");
matrix = {};
for (i = 0; i < chans; i += 1) {
	matrix[i] = i;
}
MIX(0, inskip, dur, amp, matrix);
'
echo $script | CMIX $flags --sfin=$infile --sfout=$outfile $*

